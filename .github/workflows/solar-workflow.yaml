name: Solar system workflow

on:
  workflow_dispatch:
  push:
     branches:
       - main
       - 'feature*'

jobs:
   unit-testing:
        name: Unit testing
        #strategy:
         #   matrix:
          #      nodejs_version: [18, 19, 20]
           #     - nodejs_version: 18
            #        operating_system: macos-latest
        #runs-on: ${{matrix.operating_system}}
        runs-on: ubuntu-latest
        steps:
        - name: Checkout repo
          uses: actions/checkout@v4

        - name: Setup nodejs version-${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ubuntu-latest-node-modules-${{ hashfiles('package-lock.json') }}

        - name: Install dependencies
          run: npm install

        - name: Unit testing
          continue-on-error: true
          id: nodejs-unit-testing-step
          run: npm test
        
        - name: status of testing
          #if: always()    ## we can add if: always() means if previous stpe will pass or fail then this step will run always
          run: echo "Tetsing is failed"   ##testing cache

   docker-login:
    needs: unit-testing
    runs-on: ubuntu-latest
    permissions:
            packages: write
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

     # - name: Login to github container registry 
     #   uses: docker/login-action@v3
     #   with:
     #    registry: ghcr.io
     #     username: ${{ github.repository_owner }}
     #     password: ${{ secrets.GITHUB_TOKEN }}


      - name: Docker build for testing
        uses: docker/build-push-action@v4
        with:
           context: .   ## Accept the path where you have docker file in our case dockerfile present in root directory in repo
           push: false
           tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}  ## version will be dynamically changes with sha value of commit id.

      - name: docker image testing
        run: |
            docker images
            docker run -it -d --name solar-system \
               -p 3000:3000 \
               ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker/Github registry push
        uses: docker/build-push-action@v4
        with:
           context: .   ## Accepts the path where you have docker file in our case dockerfile present in root directory in repo
           push: true
           tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}  ####ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
           
   dev-deploy:
    needs: docker-login
    #outputs:
      #APP_INGRESS_URL: #{{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}  ## here we have set the output for INGRESS_URL at job level so we can use this in other jobs
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: install kubectl cli
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: set kubeconfig file
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: kubernetes cluster details
        run: |
            kubectl version --short
            echo "hello kubernetes"
            kubectl get nodes

      #- name: Save Nginx Ingress Controller IP as a GITHUB environment variable
        # id: set-ingress-host-address
      #  run: |
      #     echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_OUTPUT

      - name: replace tokens in manifest file
        uses: cschleiden/replace-tokens@v1
        with: 
          tokenPrefix: '${'     # you will check prefix and suffix in deployment.yaml
          tokenSuffix: '}'
          files: '["kubernetes/development/*.yaml"]'    # manifest files are present in development folder
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} 
          #INGRESS_IP: {{ env.INGRESS_IP}}   ## so we will call the env variable of ingress using line 117 also please add $ before {{ curly places

      - name: Check files
        run: |
           cat kubernetes/development/*.yaml

      - name: Deploy to dev env
        run: |
          kubectl apply -f kubernetes/development

   integration-testing:
    name: Dev Integration tetsing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: test url output using curl and jq
        #env:
          #URL: {{ needs.dev-deploy.outputs.APP_INGRESS_URL }}   # we are using the output from one job to other
        run: |
            echo "hello solar system"
            curl http://18.234.61.209:31886/ -s -k .status | grep -i live
        





           

       
